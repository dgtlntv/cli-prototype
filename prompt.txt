The following text is a Git repository with code. The structure of the text are sections that begin with ----, followed by a single line containing the file path and file name, followed by a variable amount of lines containing the file contents. The text representing the Git repository ends when the symbols --END-- are encounted. Any further text beyond --END-- are meant to be interpreted as instructions using the aforementioned Git repository as context.
----
.gitattributes
# Auto detect text files and perform LF normalization
* text=auto

----
.github/workflows/deploy.yml
name: Deploy static content to Pages

on:
    push:
        branches: ["main"]

    workflow_dispatch:

permissions:
    contents: read
    pages: write
    id-token: write

concurrency:
    group: "pages"
    cancel-in-progress: true

jobs:
    deploy:
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Set up Node
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: "npm"
            - name: Install dependencies
              run: npm ci
            - name: Build
              run: npm run build
            - name: Setup Pages
              uses: actions/configure-pages@v4
            - name: Upload artifact
              uses: actions/upload-pages-artifact@v3
              with:
                  path: "./dist"
            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4

----
README.md
# CLI Prototyping Tool

This tool allows you to create interactive CLI prototypes using a simple JSON configuration file. It's designed to be easy to use, even for those with limited coding experience.

## Usage

Usage

Define your CLI prototype in the commands.json file using the features described below.
Open the HTML file in a web browser to interact with your CLI prototype.

## Limitations

This is a simulation tool and does not execute actual system commands.
Some features (like custom output formatting) may require additional implementation in the JavaScript code.

## Features

The CLI prototype is configured using a `commands.json` file. Here are the features available:

### Basic Command Structure

```json
"commandName": {
  "description": "Description of the command",
  "action": "Output of the command"
}
```

### Colored Output

Specify a color for the command output:

```json
"action": "This will be green",
"color": "green"
```

Available colors: black, red, green, yellow, blue, magenta, cyan, white.

### Flags

Add flags to your commands:

```json
"flags": {
  "--flagName": {
    "description": "Description of the flag",
    "requiresValue": true,
    "aliases": ["-f"]
  }
}
```

### Subcommands

Create nested command structures:

```json
"git": {
  "description": "Version control system",
  "subcommands": {
    "commit": {
      "description": "Record changes to the repository",
      "action": "Changes committed successfully."
    }
  }
}
```

### Positional Arguments

Define positional arguments for your commands:

```json
"args": [
  {
    "name": "text",
    "description": "The text to display"
  }
]
```

### Input Prompts

Create interactive prompts:

```json
"prompts": [
  {
    "name": "username",
    "message": "Enter your username:"
  },
  {
    "name": "password",
    "message": "Enter your password:",
    "hidden": true
  }
]
```

### Conditional Execution

Use conditions to determine command behavior:

```json
"action": [
  {
    "if": "flags['--environment'] === 'production'",
    "then": "Deploying to production...",
    "else": "Deploying to {{flags['--environment']}}..."
  }
]
```

### Command Aliases

Create alternative names for your commands:

```json
"aliases": ["ls", "dir"]
```

### Custom Output Formatting

Specify custom data and format (formatting to be implemented in JavaScript):

```json
"action": {
  "data": {
    "cpu": "25%",
    "memory": "4GB",
    "disk": "120GB"
  },
  "format": "table"
}
```

### Command Chaining

Execute multiple actions in sequence:

```json
"action": [
  "Installing dependencies...",
  { "command": "echo", "args": ["Dependencies installed."] },
  "Setup complete!"
]
```

### Time Actions

Simulate time-consuming operations:

```json
"action": [
  {
    "text": "Compiling source files...",
    "delay": 2000
  },
  {
    "text": "Build complete!",
    "delay": 500
  }
]
```

### Progress Bars

Show progress for long-running operations:

```json
"action": [
  {
    "type": "progressBar",
    "text": "Downloading:",
    "duration": 5000
  },
  "Download complete!"
]
```

### Spinners

Display a spinner for indeterminate progress:

```json
"action": [
  {
    "type": "spinner",
    "text": "Processing data",
    "duration": 3000
  },
  "Processing complete!"
]
```

----
index.html
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>CLI Prototype</title>
    </head>
    <body>
        <div id="terminal"></div>
        <script type="module" src="/src/main.js"></script>
    </body>
</html>

----
package-lock.json
{
  "name": "cli-prototype",
  "version": "0.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "cli-prototype",
      "version": "0.0.0",
      "dependencies": {
        "xterm": "^5.3.0",
        "xterm-addon-fit": "^0.8.0"
      },
      "devDependencies": {
        "vite": "^5.3.1"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.21.5.tgz",
      "integrity": "sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.21.5.tgz",
      "integrity": "sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.21.5.tgz",
      "integrity": "sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.21.5.tgz",
      "integrity": "sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.21.5.tgz",
      "integrity": "sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.21.5.tgz",
      "integrity": "sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.21.5.tgz",
      "integrity": "sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.21.5.tgz",
      "integrity": "sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.21.5.tgz",
      "integrity": "sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.21.5.tgz",
      "integrity": "sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.21.5.tgz",
      "integrity": "sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.21.5.tgz",
      "integrity": "sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.21.5.tgz",
      "integrity": "sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.21.5.tgz",
      "integrity": "sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.21.5.tgz",
      "integrity": "sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.21.5.tgz",
      "integrity": "sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.21.5.tgz",
      "integrity": "sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.21.5.tgz",
      "integrity": "sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.21.5.tgz",
      "integrity": "sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.21.5.tgz",
      "integrity": "sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.21.5.tgz",
      "integrity": "sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.21.5.tgz",
      "integrity": "sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz",
      "integrity": "sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.18.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.18.0.tgz",
      "integrity": "sha512-Tya6xypR10giZV1XzxmH5wr25VcZSncG0pZIjfePT0OVBvqNEurzValetGNarVrGiq66EBVAFn15iYX4w6FKgQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.18.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.18.0.tgz",
      "integrity": "sha512-avCea0RAP03lTsDhEyfy+hpfr85KfyTctMADqHVhLAF3MlIkq83CP8UfAHUssgXTYd+6er6PaAhx/QGv4L1EiA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.18.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.18.0.tgz",
      "integrity": "sha512-IWfdwU7KDSm07Ty0PuA/W2JYoZ4iTj3TUQjkVsO/6U+4I1jN5lcR71ZEvRh52sDOERdnNhhHU57UITXz5jC1/w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.18.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.18.0.tgz",
      "integrity": "sha512-n2LMsUz7Ynu7DoQrSQkBf8iNrjOGyPLrdSg802vk6XT3FtsgX6JbE8IHRvposskFm9SNxzkLYGSq9QdpLYpRNA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.18.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.18.0.tgz",
      "integrity": "sha512-C/zbRYRXFjWvz9Z4haRxcTdnkPt1BtCkz+7RtBSuNmKzMzp3ZxdM28Mpccn6pt28/UWUCTXa+b0Mx1k3g6NOMA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.18.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.18.0.tgz",
      "integrity": "sha512-l3m9ewPgjQSXrUMHg93vt0hYCGnrMOcUpTz6FLtbwljo2HluS4zTXFy2571YQbisTnfTKPZ01u/ukJdQTLGh9A==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.18.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.18.0.tgz",
      "integrity": "sha512-rJ5D47d8WD7J+7STKdCUAgmQk49xuFrRi9pZkWoRD1UeSMakbcepWXPF8ycChBoAqs1pb2wzvbY6Q33WmN2ftw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.18.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.18.0.tgz",
      "integrity": "sha512-be6Yx37b24ZwxQ+wOQXXLZqpq4jTckJhtGlWGZs68TgdKXJgw54lUUoFYrg6Zs/kjzAQwEwYbp8JxZVzZLRepQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
      "version": "4.18.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.18.0.tgz",
      "integrity": "sha512-hNVMQK+qrA9Todu9+wqrXOHxFiD5YmdEi3paj6vP02Kx1hjd2LLYR2eaN7DsEshg09+9uzWi2W18MJDlG0cxJA==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.18.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.18.0.tgz",
      "integrity": "sha512-ROCM7i+m1NfdrsmvwSzoxp9HFtmKGHEqu5NNDiZWQtXLA8S5HBCkVvKAxJ8U+CVctHwV2Gb5VUaK7UAkzhDjlg==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.18.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.18.0.tgz",
      "integrity": "sha512-0UyyRHyDN42QL+NbqevXIIUnKA47A+45WyasO+y2bGJ1mhQrfrtXUpTxCOrfxCR4esV3/RLYyucGVPiUsO8xjg==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.18.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.18.0.tgz",
      "integrity": "sha512-xuglR2rBVHA5UsI8h8UbX4VJ470PtGCf5Vpswh7p2ukaqBGFTnsfzxUBetoWBWymHMxbIG0Cmx7Y9qDZzr648w==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.18.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.18.0.tgz",
      "integrity": "sha512-LKaqQL9osY/ir2geuLVvRRs+utWUNilzdE90TpyoX0eNqPzWjRm14oMEE+YLve4k/NAqCdPkGYDaDF5Sw+xBfg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.18.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.18.0.tgz",
      "integrity": "sha512-7J6TkZQFGo9qBKH0pk2cEVSRhJbL6MtfWxth7Y5YmZs57Pi+4x6c2dStAUvaQkHQLnEQv1jzBUW43GvZW8OFqA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.18.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.18.0.tgz",
      "integrity": "sha512-Txjh+IxBPbkUB9+SXZMpv+b/vnTEtFyfWZgJ6iyCmt2tdx0OF5WhFowLmnh8ENGNpfUlUZkdI//4IEmhwPieNg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.18.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.18.0.tgz",
      "integrity": "sha512-UOo5FdvOL0+eIVTgS4tIdbW+TtnBLWg1YBCcU2KWM7nuNwRz9bksDX1bekJJCpu25N1DVWaCwnT39dVQxzqS8g==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@types/estree": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.5.tgz",
      "integrity": "sha512-/kYRxGDLWzHOB7q+wtSUQlFrtcdUccpfy+X+9iMBpHK8QLLhx2wIPYuS5DYtR9Wa/YlZAbIovy7qVdB1Aq6Lyw==",
      "dev": true
    },
    "node_modules/esbuild": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.21.5.tgz",
      "integrity": "sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==",
      "dev": true,
      "hasInstallScript": true,
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=12"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.21.5",
        "@esbuild/android-arm": "0.21.5",
        "@esbuild/android-arm64": "0.21.5",
        "@esbuild/android-x64": "0.21.5",
        "@esbuild/darwin-arm64": "0.21.5",
        "@esbuild/darwin-x64": "0.21.5",
        "@esbuild/freebsd-arm64": "0.21.5",
        "@esbuild/freebsd-x64": "0.21.5",
        "@esbuild/linux-arm": "0.21.5",
        "@esbuild/linux-arm64": "0.21.5",
        "@esbuild/linux-ia32": "0.21.5",
        "@esbuild/linux-loong64": "0.21.5",
        "@esbuild/linux-mips64el": "0.21.5",
        "@esbuild/linux-ppc64": "0.21.5",
        "@esbuild/linux-riscv64": "0.21.5",
        "@esbuild/linux-s390x": "0.21.5",
        "@esbuild/linux-x64": "0.21.5",
        "@esbuild/netbsd-x64": "0.21.5",
        "@esbuild/openbsd-x64": "0.21.5",
        "@esbuild/sunos-x64": "0.21.5",
        "@esbuild/win32-arm64": "0.21.5",
        "@esbuild/win32-ia32": "0.21.5",
        "@esbuild/win32-x64": "0.21.5"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/nanoid": {
      "version": "3.3.7",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.7.tgz",
      "integrity": "sha512-eSRppjcPIatRIMC1U6UngP8XFcz8MQWGQdt1MTBQ7NaAmvXDfvNxbvWV3x2y6CdEUciCSsDHDQZbhYaB8QEo2g==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/picocolors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.1.tgz",
      "integrity": "sha512-anP1Z8qwhkbmu7MFP5iTt+wQKXgwzf7zTyGlcdzabySa9vd0Xt392U0rVmz9poOaBj0uHJKyyo9/upk0HrEQew==",
      "dev": true
    },
    "node_modules/postcss": {
      "version": "8.4.39",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.39.tgz",
      "integrity": "sha512-0vzE+lAiG7hZl1/9I8yzKLx3aR9Xbof3fBHKunvMfOCYAtMhrsnccJY2iTURb9EZd5+pLuiNV9/c/GZJOHsgIw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "nanoid": "^3.3.7",
        "picocolors": "^1.0.1",
        "source-map-js": "^1.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/rollup": {
      "version": "4.18.0",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.18.0.tgz",
      "integrity": "sha512-QmJz14PX3rzbJCN1SG4Xe/bAAX2a6NpCP8ab2vfu2GiUr8AQcr2nCV/oEO3yneFarB67zk8ShlIyWb2LGTb3Sg==",
      "dev": true,
      "dependencies": {
        "@types/estree": "1.0.5"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.18.0",
        "@rollup/rollup-android-arm64": "4.18.0",
        "@rollup/rollup-darwin-arm64": "4.18.0",
        "@rollup/rollup-darwin-x64": "4.18.0",
        "@rollup/rollup-linux-arm-gnueabihf": "4.18.0",
        "@rollup/rollup-linux-arm-musleabihf": "4.18.0",
        "@rollup/rollup-linux-arm64-gnu": "4.18.0",
        "@rollup/rollup-linux-arm64-musl": "4.18.0",
        "@rollup/rollup-linux-powerpc64le-gnu": "4.18.0",
        "@rollup/rollup-linux-riscv64-gnu": "4.18.0",
        "@rollup/rollup-linux-s390x-gnu": "4.18.0",
        "@rollup/rollup-linux-x64-gnu": "4.18.0",
        "@rollup/rollup-linux-x64-musl": "4.18.0",
        "@rollup/rollup-win32-arm64-msvc": "4.18.0",
        "@rollup/rollup-win32-ia32-msvc": "4.18.0",
        "@rollup/rollup-win32-x64-msvc": "4.18.0",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.0.tgz",
      "integrity": "sha512-itJW8lvSA0TXEphiRoawsCksnlf8SyvmFzIhltqAHluXd88pkCd+cXJVHTDwdCr0IzwptSm035IHQktUu1QUMg==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/vite": {
      "version": "5.3.3",
      "resolved": "https://registry.npmjs.org/vite/-/vite-5.3.3.tgz",
      "integrity": "sha512-NPQdeCU0Dv2z5fu+ULotpuq5yfCS1BzKUIPhNbP3YBfAMGJXbt2nS+sbTFu+qchaqWTD+H3JK++nRwr6XIcp6A==",
      "dev": true,
      "dependencies": {
        "esbuild": "^0.21.3",
        "postcss": "^8.4.39",
        "rollup": "^4.13.0"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || >=20.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || >=20.0.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.4.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        }
      }
    },
    "node_modules/xterm": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/xterm/-/xterm-5.3.0.tgz",
      "integrity": "sha512-8QqjlekLUFTrU6x7xck1MsPzPA571K5zNqWm0M0oroYEWVOptZ0+ubQSkQ3uxIEhcIHRujJy6emDWX4A7qyFzg==",
      "deprecated": "This package is now deprecated. Move to @xterm/xterm instead."
    },
    "node_modules/xterm-addon-fit": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/xterm-addon-fit/-/xterm-addon-fit-0.8.0.tgz",
      "integrity": "sha512-yj3Np7XlvxxhYF/EJ7p3KHaMt6OdwQ+HDu573Vx1lRXsVxOcnVJs51RgjZOouIZOczTsskaS+CpXspK81/DLqw==",
      "deprecated": "This package is now deprecated. Move to @xterm/addon-fit instead.",
      "peerDependencies": {
        "xterm": "^5.0.0"
      }
    }
  }
}

----
package.json
{
  "name": "cli-prototype",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "devDependencies": {
    "vite": "^5.3.1"
  },
  "dependencies": {
    "xterm": "^5.3.0",
    "xterm-addon-fit": "^0.8.0"
  }
}

----
src/commands/clearCommand.js
export function clearCommand(term) {
    term.clear()
    term.reset()
    term.write("\x1b[H")
}

----
src/commands/customCommands.js
import { interpolate } from "../utils/interpolation.js"
import { writeColoredText } from "../utils/textFormatting.js"
import { showProgressBar } from "../components/ProgressBar.js"
import { showSpinner } from "../components/Spinner.js"
import { handlePrompts } from "../components/Prompt.js"
import commandsData from "../commands.json"

export let customCommands = {}

export function loadCommands() {
    try {
        customCommands = commandsData.commands || {}
    } catch (error) {
        console.error("Error loading commands:", error)
    }
}

export async function executeCustomCommand(term, command, args) {
    const cmd = getCommand(command)
    if (!cmd) {
        term.writeln(`Unknown command: ${command}`)
        return
    }

    const { flags, positionalArgs } = parseArgs(args, cmd)

    if (flags["--help"] || flags["-h"]) {
        showCommandHelp(term, command)
        return
    }

    if (cmd.subcommands && positionalArgs.length > 0) {
        const subcommand = cmd.subcommands[positionalArgs[0]]
        if (subcommand) {
            await executeAction(term, subcommand.action, flags, positionalArgs.slice(1))
            return
        }
    }

    if (cmd.prompts) {
        const promptResults = await handlePrompts(term, cmd.prompts)
        Object.assign(flags, promptResults)
        await executeAction(term, cmd.action, flags, positionalArgs)
        return
    }

    await executeAction(term, cmd.action, flags, positionalArgs)
}

function getCommand(command) {
    return (
        customCommands[command] ||
        Object.values(customCommands).find((cmd) => cmd.aliases && cmd.aliases.includes(command))
    )
}

function parseArgs(args, cmd) {
    const flags = {}
    const positionalArgs = []
    const flagAliases = createFlagAliasMap(cmd.flags)

    for (let i = 0; i < args.length; i++) {
        const arg = args[i]
        if (arg.startsWith("-")) {
            const flagName = flagAliases[arg]
            if (flagName) {
                const flagDetails = cmd.flags[flagName]
                if (flagDetails.requiresValue && i + 1 < args.length) {
                    flags[flagName] = args[++i]
                } else {
                    flags[flagName] = true
                }
            }
        } else {
            positionalArgs.push(arg)
        }
    }

    return { flags, positionalArgs }
}

function createFlagAliasMap(flags) {
    const aliasMap = {}
    if (!flags) return aliasMap

    Object.entries(flags).forEach(([flag, details]) => {
        aliasMap[flag] = flag
        if (details.aliases) {
            details.aliases.forEach((alias) => {
                aliasMap[alias] = flag
            })
        }
    })

    return aliasMap
}

function showCommandHelp(term, command) {
    const cmd = getCommand(command)
    if (cmd) {
        term.writeln(`${command} - ${cmd.description}`)
        if (cmd.args) {
            term.writeln("\nArguments:")
            cmd.args.forEach((arg) => {
                term.writeln(`  ${arg.name}: ${arg.description}`)
            })
        }
        if (cmd.flags) {
            term.writeln("\nFlags:")
            Object.entries(cmd.flags).forEach(([flag, details]) => {
                const aliases = details.aliases ? ` (${details.aliases.join(", ")})` : ""
                term.writeln(`  ${flag}${aliases}: ${details.description}`)
            })
        }
        if (cmd.subcommands) {
            term.writeln("\nSubcommands:")
            Object.entries(cmd.subcommands).forEach(([subcommand, details]) => {
                term.writeln(`  ${subcommand} - ${details.description}`)
            })
        }
    } else {
        term.writeln(`No help available for '${command}'.`)
    }
}

async function executeAction(term, action, flags, args) {
    const context = { flags, args }
    if (Array.isArray(action)) {
        for (const item of action) {
            await processActionItem(term, item, context)
        }
    } else if (typeof action === "object") {
        await processActionItem(term, action, context)
    } else if (typeof action === "string") {
        writeColoredText(term, interpolate(action, context), "white")
        term.write("\r\n")
    }
}

async function processActionItem(term, item, context) {
    if (typeof item === "string") {
        writeColoredText(term, interpolate(item, context), "white")
        term.write("\r\n")
    } else if (typeof item === "object") {
        if (item.if) {
            const condition = interpolate(item.if, context)
            if (eval(condition)) {
                await executeAction(term, item.then, context.flags, context.args)
            } else if (item.else) {
                await executeAction(term, item.else, context.flags, context.args)
            }
        } else if (item.type === "progressBar") {
            await showProgressBar(term, interpolate(item.text, context), item.duration)
        } else if (item.type === "spinner") {
            await showSpinner(term, interpolate(item.text, context), item.duration)
        } else if (item.command) {
            await executeCustomCommand(term, item.command, [])
        } else if (item.text) {
            writeColoredText(term, interpolate(item.text, context), item.color || "white")
            term.write("\r\n")
            if (item.delay) {
                await new Promise((resolve) => setTimeout(resolve, item.delay))
            }
        }
    }
}

----
src/commands/helpCommand.js
import { customCommands } from "./customCommands.js"

export function helpCommand(term) {
    term.writeln("Available commands:")
    term.writeln("  help - Show available commands")
    Object.entries(customCommands).forEach(([command, details]) => {
        const aliases = details.aliases ? ` (${details.aliases.join(", ")})` : ""
        term.writeln(`  ${command}${aliases} - ${details.description}`)
    })
    term.writeln("\nType '<command> --help' for more information on a specific command.")
}

----
src/commands/index.js
export { handleCommand } from "../components/CommandHandler.js"
export { clearCommand } from "./clearCommand.js"
export { helpCommand } from "./helpCommand.js"
export { executeCustomCommand, loadCommands, customCommands } from "./customCommands.js"

----
src/commands.json
{
    "welcome": {
        "message": "Welcome to the Enhanced CLI Prototype!\nType 'help' to get a list of all available commands.\n",
        "color": "green"
    },
    "commands": {
        "hello": {
            "description": "Prints a greeting",
            "action": "Hello, world!\nWelcome to the terminal!",
            "color": "green",
            "flags": {
                "--name": {
                    "description": "Specify a name for a personalized greeting",
                    "requiresValue": true,
                    "aliases": ["-n"]
                }
            },
            "action": [
                {
                    "if": "flags['--name']",
                    "then": "Hello, {{flags['--name']}}!\nWelcome to the terminal!",
                    "else": "Hello, world!\nWelcome to the terminal!"
                }
            ]
        },
        "git": {
            "description": "Version control system",
            "subcommands": {
                "commit": {
                    "description": "Record changes to the repository",
                    "action": "Changes committed successfully.",
                    "flags": {
                        "--message": {
                            "description": "Commit message",
                            "requiresValue": true,
                            "aliases": ["-m"]
                        }
                    }
                },
                "push": {
                    "description": "Update remote refs along with associated objects",
                    "action": "Changes pushed to remote repository."
                }
            }
        },
        "echo": {
            "description": "Display a line of text",
            "args": [
                {
                    "name": "text",
                    "description": "The text to display"
                }
            ],
            "action": "{{args[0]}}"
        },
        "login": {
            "description": "Log in to the system",
            "prompts": [
                {
                    "name": "username",
                    "message": "Enter your username:"
                },
                {
                    "name": "password",
                    "message": "Enter your password:",
                    "hidden": true
                }
            ],
            "action": "Welcome, {{flags.username}}!"
        },
        "deploy": {
            "description": "Deploy the application",
            "flags": {
                "--environment": {
                    "description": "Deployment environment",
                    "requiresValue": true
                }
            },
            "action": [
                {
                    "if": "flags['--environment'] === 'production'",
                    "then": "Deploying to production...",
                    "else": "Deploying to {{flags['--environment']}}..."
                }
            ]
        },
        "list": {
            "description": "List files and directories",
            "aliases": ["ls", "dir"],
            "action": "Listing files and directories..."
        },
        "status": {
            "description": "Show system status",
            "action": {
                "data": {
                    "cpu": "25%",
                    "memory": "4GB",
                    "disk": "120GB"
                },
                "format": "table"
            }
        },
        "setup": {
            "description": "Set up the development environment",
            "action": [
                "Installing dependencies...",
                { "command": "echo", "args": ["Dependencies installed."] },
                {
                    "text": "Configuring settings...",
                    "delay": 1000
                },
                "Setup complete!"
            ]
        },
        "build": {
            "description": "Build the project",
            "action": [
                {
                    "text": "Compiling source files...",
                    "delay": 2000
                },
                {
                    "text": "Optimizing...",
                    "delay": 1500
                },
                {
                    "text": "Generating output...",
                    "delay": 1000
                },
                {
                    "text": "Build complete!",
                    "delay": 500
                }
            ]
        },
        "download": {
            "description": "Download a large file",
            "action": [
                {
                    "type": "progressBar",
                    "text": "Downloading:",
                    "duration": 5000
                },
                "Download complete!"
            ]
        },
        "process": {
            "description": "Process data",
            "action": [
                {
                    "type": "spinner",
                    "text": "Processing data",
                    "duration": 3000
                },
                "Processing complete!"
            ]
        }
    }
}

----
src/components/CommandHandler.js
import { writePrompt } from "./Terminal.js"
import { clearCommand } from "../commands/clearCommand.js"
import { helpCommand } from "../commands/helpCommand.js"
import { executeCustomCommand } from "../commands/customCommands.js"

export async function handleCommand(term, cmd) {
    const args = cmd.trim().split(/\s+/)
    const command = args[0].toLowerCase()
    const restArgs = args.slice(1)

    if (command === "clear") {
        clearCommand(term)
    } else if (command === "help") {
        helpCommand(term)
    } else {
        await executeCustomCommand(term, command, restArgs)
    }
    writePrompt()
}

----
src/components/KeyboardHandler.js
import { handleCommand } from "../commands/index.js"
import { writePrompt } from "./Terminal.js"

let isPromptActive = false

export function setPromptActive(active) {
    isPromptActive = active
}

export function setupKeyboardHandler(term) {
    let input = ""
    let commandHistory = []
    let historyIndex = -1
    let cursorPosition = 0

    term.onKey(({ key, domEvent }) => {
        if (isPromptActive) {
            return // Let the prompt handler deal with the input
        }

        const printable = !domEvent.altKey && !domEvent.ctrlKey && !domEvent.metaKey

        if (domEvent.keyCode === 13) {
            // Enter key
            term.writeln("")
            if (input.trim() !== "") {
                commandHistory.unshift(input)
                historyIndex = -1
            }
            handleCommand(term, input)
            input = ""
            cursorPosition = 0
        } else if (domEvent.keyCode === 8) {
            // Backspace
            if (cursorPosition > 0) {
                input = input.slice(0, cursorPosition - 1) + input.slice(cursorPosition)
                cursorPosition--
                term.write("\b \b")
                term.write(input.slice(cursorPosition))
                term.write("\x1b[K")
                term.write("\x1b[" + (input.length - cursorPosition) + "D")
            }
        } else if (domEvent.keyCode === 37) {
            // Left arrow
            if (cursorPosition > 0) {
                cursorPosition--
                term.write(key)
            }
        } else if (domEvent.keyCode === 39) {
            // Right arrow
            if (cursorPosition < input.length) {
                cursorPosition++
                term.write(key)
            }
        } else if (domEvent.keyCode === 38) {
            // Up arrow
            if (historyIndex < commandHistory.length - 1) {
                historyIndex++
                input = commandHistory[historyIndex]
                term.write("\x1b[2K\r")
                writePrompt()
                term.write(input)
                cursorPosition = input.length
            }
        } else if (domEvent.keyCode === 40) {
            // Down arrow
            if (historyIndex > -1) {
                historyIndex--
                if (historyIndex === -1) {
                    input = ""
                } else {
                    input = commandHistory[historyIndex]
                }
                term.write("\x1b[2K\r")
                writePrompt()
                term.write(input)
                cursorPosition = input.length
            }
        } else if (printable) {
            input = input.slice(0, cursorPosition) + key + input.slice(cursorPosition)
            cursorPosition++
            term.write(key)
            if (cursorPosition < input.length) {
                term.write(input.slice(cursorPosition))
                term.write("\x1b[" + (input.length - cursorPosition) + "D")
            }
        }
    })
}

----
src/components/ProgressBar.js
export async function showProgressBar(term, text, duration) {
    const width = 50
    const frameDuration = 100
    const frames = duration / frameDuration

    for (let i = 0; i <= frames; i++) {
        const progress = i / frames
        const filled = Math.round(width * progress)
        const empty = width - filled
        const bar = `[${"=".repeat(filled)}${" ".repeat(empty)}]`
        const percentage = Math.round(progress * 100)

        term.write(`\r${text} ${bar} ${percentage}%`)

        if (i < frames) {
            await new Promise((resolve) => setTimeout(resolve, frameDuration))
        }
    }
    term.write("\r\n")
}

----
src/components/Prompt.js
import { setPromptActive } from "./KeyboardHandler.js"

export async function handlePrompts(term, prompts) {
    const results = {}
    for (const prompt of prompts) {
        results[prompt.name] = await getInput(term, prompt)
    }
    return results
}

async function getInput(term, prompt) {
    return new Promise((resolve) => {
        term.write(`${prompt.message} `)
        let inputBuffer = ""

        setPromptActive(true)

        const disposable = term.onKey(({ key, domEvent }) => {
            const printable = !domEvent.altKey && !domEvent.ctrlKey && !domEvent.metaKey

            if (domEvent.keyCode === 13) {
                // Enter
                term.write("\r\n")
                disposable.dispose()
                setPromptActive(false)
                resolve(inputBuffer)
            } else if (domEvent.keyCode === 8) {
                // Backspace
                if (inputBuffer.length > 0) {
                    inputBuffer = inputBuffer.slice(0, -1)
                    term.write("\b \b")
                }
            } else if (printable) {
                inputBuffer += key
                if (prompt.hidden) {
                    term.write("*")
                } else {
                    term.write(key)
                }
            }
        })
    })
}

----
src/components/Spinner.js
export async function showSpinner(term, text, duration) {
    const spinnerFrames = ["|", "/", "-", "\\"]
    const frameDuration = 100
    const frames = duration / frameDuration

    for (let i = 0; i < frames; i++) {
        const frame = spinnerFrames[i % spinnerFrames.length]
        term.write(`\r${text} ${frame}`)
        await new Promise((resolve) => setTimeout(resolve, frameDuration))
    }
    term.write("\r\n")
}

----
src/components/Terminal.js
import { Terminal } from "xterm"
import { FitAddon } from "xterm-addon-fit"
import { setupKeyboardHandler } from "./KeyboardHandler.js"
import { loadCommands } from "../commands/customCommands.js"
import { writeColoredText } from "../utils/textFormatting.js"

let term
let welcomeMessage = "Welcome to the CLI Prototype!\nType 'help' to see a list of available commands."
let welcomeColor = "white"

export function initializeTerminal() {
    loadCommands()
    setupTerminal()
    writeColoredText(term, welcomeMessage, welcomeColor)
    writePrompt()
}

function setupTerminal() {
    term = new Terminal({
        cursorBlink: true,
        fontSize: 18,
        fontFamily: '"Ubuntu Mono", monospace',
        fontWeight: 400,
        theme: {
            background: "#330F25",
            foreground: "#ffffff",
            cursor: "#ffffff",
            selection: "rgba(255, 255, 255, 0.3)",
            black: "#2e3436",
            red: "#cc0000",
            green: "#00975F",
            yellow: "#c4a000",
            blue: "#00407C",
            magenta: "#75507b",
            cyan: "#06989a",
            white: "#d3d7cf",
        },
    })

    const fitAddon = new FitAddon()
    term.loadAddon(fitAddon)
    term.open(document.getElementById("terminal"))

    fitAddon.fit()
    window.addEventListener("resize", () => fitAddon.fit())

    setupKeyboardHandler(term)
}

export function writePrompt() {
    term.write("\r\n\x1b[1;32muser@ubuntu\x1b[0m:\x1b[1;34m~\x1b[0m\x1b[37m$ \x1b[0m")
}

export { term }

----
src/main.js
import { initializeTerminal } from "./components/Terminal.js"
import "./styles.css"
import "xterm/css/xterm.css"

document.addEventListener("DOMContentLoaded", initializeTerminal)

----
src/styles.css
@import url("https://fonts.googleapis.com/css2?family=Ubuntu+Mono:wght@400;700&display=swap");

html,
body {
    height: 100%;
    margin: 0;
    padding: 0;
    overflow: hidden;
    background-color: #330f25;
}
#terminal {
    height: 100%;
    width: 100%;
}
.xterm-viewport {
    overflow-y: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
}
.xterm-viewport::-webkit-scrollbar {
    width: 0;
    height: 0;
}
.xterm {
    padding: 20px;
    font-family: "Ubuntu Mono", monospace;
}
.xterm-screen {
    width: 100% !important;
}

----
src/utils/interpolation.js
export function interpolate(text, context) {
    return text.replace(/\{\{([^}]+)\}\}/g, (_, expr) => {
        try {
            return new Function(...Object.keys(context), `return ${expr}`)(...Object.values(context))
        } catch (error) {
            console.error(`Error interpolating "${expr}":`, error)
            return `{{${expr}}}`
        }
    })
}

----
src/utils/textFormatting.js
export function writeColoredText(term, text, color) {
    const colorCodes = {
        black: "\x1b[30m",
        red: "\x1b[31m",
        green: "\x1b[32m",
        yellow: "\x1b[33m",
        blue: "\x1b[34m",
        magenta: "\x1b[35m",
        cyan: "\x1b[36m",
        white: "\x1b[37m",
    }
    const colorCode = color && colorCodes[color] ? colorCodes[color] : ""
    const resetCode = colorCode ? "\x1b[0m" : ""

    const lines = text.split("\n")
    for (let i = 0; i < lines.length; i++) {
        if (i > 0) term.write("\r\n")
        term.write(`${colorCode}${lines[i]}${resetCode}`)
    }
}

----
vite.config.js
import { defineConfig } from "vite"

export default defineConfig({
    base: "/cli-prototype/",
    json: {
        stringify: true,
    },
})

--END--