diff --git a/lib/index.js b/lib/index.js
index 5391919ca2c6314bdd7c246e4d00ae1cec42c98d..3e467eb96640cdd187c15f2aa4683cbb99cc4b6c 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -1,153 +1,157 @@
-"use strict";
+"use strict"
 
 // Some environments don't have global Buffer (e.g. React Native).
 // Solution would be installing npm modules "buffer" and "stream" explicitly.
-var Buffer = require("safer-buffer").Buffer;
+var Buffer = require("safer-buffer").Buffer
 
 var bomHandling = require("./bom-handling"),
-    iconv = module.exports;
+    iconv = module.exports
 
 // All codecs and aliases are kept here, keyed by encoding name/alias.
 // They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.
-iconv.encodings = null;
+iconv.encodings = null
 
 // Characters emitted in case of error.
-iconv.defaultCharUnicode = '�';
-iconv.defaultCharSingleByte = '?';
+iconv.defaultCharUnicode = "�"
+iconv.defaultCharSingleByte = "?"
 
 // Public API.
 iconv.encode = function encode(str, encoding, options) {
-    str = "" + (str || ""); // Ensure string.
+    str = "" + (str || "") // Ensure string.
 
-    var encoder = iconv.getEncoder(encoding, options);
+    var encoder = iconv.getEncoder(encoding, options)
 
-    var res = encoder.write(str);
-    var trail = encoder.end();
-    
-    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;
+    var res = encoder.write(str)
+    var trail = encoder.end()
+
+    return trail && trail.length > 0 ? Buffer.concat([res, trail]) : res
 }
 
 iconv.decode = function decode(buf, encoding, options) {
-    if (typeof buf === 'string') {
+    if (typeof buf === "string") {
         if (!iconv.skipDecodeWarning) {
-            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');
-            iconv.skipDecodeWarning = true;
+            console.error(
+                "Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding"
+            )
+            iconv.skipDecodeWarning = true
         }
 
-        buf = Buffer.from("" + (buf || ""), "binary"); // Ensure buffer.
+        buf = Buffer.from("" + (buf || ""), "binary") // Ensure buffer.
     }
 
-    var decoder = iconv.getDecoder(encoding, options);
+    var decoder = iconv.getDecoder(encoding, options)
 
-    var res = decoder.write(buf);
-    var trail = decoder.end();
+    var res = decoder.write(buf)
+    var trail = decoder.end()
 
-    return trail ? (res + trail) : res;
+    return trail ? res + trail : res
 }
 
 iconv.encodingExists = function encodingExists(enc) {
     try {
-        iconv.getCodec(enc);
-        return true;
+        iconv.getCodec(enc)
+        return true
     } catch (e) {
-        return false;
+        return false
     }
 }
 
 // Legacy aliases to convert functions
-iconv.toEncoding = iconv.encode;
-iconv.fromEncoding = iconv.decode;
+iconv.toEncoding = iconv.encode
+iconv.fromEncoding = iconv.decode
 
 // Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.
-iconv._codecDataCache = {};
+iconv._codecDataCache = {}
 iconv.getCodec = function getCodec(encoding) {
-    if (!iconv.encodings)
-        iconv.encodings = require("../encodings"); // Lazy load all encoding definitions.
-    
+    if (!iconv.encodings) iconv.encodings = require("../encodings") // Lazy load all encoding definitions.
+
     // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
-    var enc = iconv._canonicalizeEncoding(encoding);
+    var enc = iconv._canonicalizeEncoding(encoding)
 
     // Traverse iconv.encodings to find actual codec.
-    var codecOptions = {};
+    var codecOptions = {}
     while (true) {
-        var codec = iconv._codecDataCache[enc];
-        if (codec)
-            return codec;
+        var codec = iconv._codecDataCache[enc]
+        if (codec) return codec
 
-        var codecDef = iconv.encodings[enc];
+        var codecDef = iconv.encodings[enc]
 
         switch (typeof codecDef) {
             case "string": // Direct alias to other encoding.
-                enc = codecDef;
-                break;
+                enc = codecDef
+                break
 
             case "object": // Alias with options. Can be layered.
-                for (var key in codecDef)
-                    codecOptions[key] = codecDef[key];
+                for (var key in codecDef) codecOptions[key] = codecDef[key]
+
+                if (!codecOptions.encodingName) codecOptions.encodingName = enc
 
-                if (!codecOptions.encodingName)
-                    codecOptions.encodingName = enc;
-                
-                enc = codecDef.type;
-                break;
+                enc = codecDef.type
+                break
 
             case "function": // Codec itself.
-                if (!codecOptions.encodingName)
-                    codecOptions.encodingName = enc;
+                if (!codecOptions.encodingName) codecOptions.encodingName = enc
 
                 // The codec function must load all tables and return object with .encoder and .decoder methods.
                 // It'll be called only once (for each different options object).
-                codec = new codecDef(codecOptions, iconv);
+                codec = new codecDef(codecOptions, iconv)
 
-                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.
-                return codec;
+                iconv._codecDataCache[codecOptions.encodingName] = codec // Save it to be reused later.
+                return codec
 
             default:
-                throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '"+enc+"')");
+                throw new Error(
+                    "Encoding not recognized: '" +
+                        encoding +
+                        "' (searched as: '" +
+                        enc +
+                        "')"
+                )
         }
     }
 }
 
-iconv._canonicalizeEncoding = function(encoding) {
+iconv._canonicalizeEncoding = function (encoding) {
     // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
-    return (''+encoding).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g, "");
+    return ("" + encoding).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g, "")
 }
 
 iconv.getEncoder = function getEncoder(encoding, options) {
     var codec = iconv.getCodec(encoding),
-        encoder = new codec.encoder(options, codec);
+        encoder = new codec.encoder(options, codec)
 
     if (codec.bomAware && options && options.addBOM)
-        encoder = new bomHandling.PrependBOM(encoder, options);
+        encoder = new bomHandling.PrependBOM(encoder, options)
 
-    return encoder;
+    return encoder
 }
 
 iconv.getDecoder = function getDecoder(encoding, options) {
     var codec = iconv.getCodec(encoding),
-        decoder = new codec.decoder(options, codec);
+        decoder = new codec.decoder(options, codec)
 
     if (codec.bomAware && !(options && options.stripBOM === false))
-        decoder = new bomHandling.StripBOM(decoder, options);
+        decoder = new bomHandling.StripBOM(decoder, options)
 
-    return decoder;
+    return decoder
 }
 
-
 // Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.
-var nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;
+var nodeVer =
+    typeof process !== "undefined" && process.versions && process.versions.node
 if (nodeVer) {
-
     // Load streaming support in Node v0.10+
-    var nodeVerArr = nodeVer.split(".").map(Number);
+    var nodeVerArr = nodeVer.split(".").map(Number)
     if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {
-        require("./streams")(iconv);
+        require("./streams.js")(iconv)
     }
 
     // Load Node primitive extensions.
-    require("./extend-node")(iconv);
+    require("./extend-node.js")(iconv)
 }
 
 if ("Ā" != "\u0100") {
-    console.error("iconv-lite warning: javascript files use encoding different from utf-8. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.");
+    console.error(
+        "iconv-lite warning: javascript files use encoding different from utf-8. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info."
+    )
 }
